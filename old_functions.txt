vec3 computeRing(Ring ring, vec3 pos) // old compute ring shader function
{
    float subdivisions = 100.0;
    vec3 Exyz = vec3(0.0, 0.0, 0.0);
    float dq = ring.q / subdivisions;
    vec3 up = vec3(0.001, 0.32861, -0.2381); // pre-compute a normalized up vector
    up = normalize(up);
    vec3 tz = ring.normal;
    vec3 tx = normalize(cross(tz, up));
    vec3 ty = normalize(cross(tz, tx));
    for(float i = 0.0; i < subdivisions; ++i)
    {
        float angle = (2.0 * pi * i) / subdivisions;
        vec2 uv = vec2(ring.radius * cos(angle), ring.radius * sin(angle));
        vec3 p = uv.x * tx + uv.y * ty + ring.pos;

        vec3 dist_v = pos - p;
        float r2 = dot(dist_v, dist_v);
        float dE = 1.0 / (4.0 * pi * E0) * (dq / r2);
        vec3 dExyz = normalize(dist_v);
        dExyz *= dE;
        Exyz += dExyz;
    }
    return Exyz;
}

vec3 computeDisc(Disc disc, vec3 pos) // old compute disc shader function
{
    float subdivisions_r = 100.0;
    float subdivisions_theta = 100.0;
    float dtheta = 1.0 / subdivisions_theta;
    float dr = 1.0 / subdivisions_r;

    vec3 Exyz = vec3(0.0, 0.0, 0.0);

    vec3 up = vec3(0.001, 0.32861, -0.2381); // pre-compute a normalized up vector
    up = normalize(up);
    vec3 tz = disc.normal;
    vec3 tx = normalize(cross(tz, up));
    vec3 ty = normalize(cross(tz, tx));
    for(float i = 0.0; i < subdivisions_r; ++i) // r
    {
        float r = i / subdivisions_r * disc.radius;
        float ds = r * dtheta;
        for(float j = 0.0; j < subdivisions_theta; ++j) // theta
        {
            float theta = 2.0 * pi * j / subdivisions_theta;
            float dA = dr * ds;
            float dq = disc.sigma * dA;

            vec2 uv = vec2(r * cos(theta), r * sin(theta));
            vec3 p = uv.x * tx + uv.y * ty + disc.pos;

            vec3 dist_v = pos - p;
            float r2 = dot(dist_v, dist_v);
            float dE = 1.0 / (4.0 * pi * E0) * (dq / r2);
            vec3 dExyz = normalize(dist_v);
            dExyz *= dE;
            Exyz += dExyz;
        }
    }
    return Exyz;
}

vec3 computeWasher(Washer washer, vec3 pos) // old compute washer shader function
{
    float subdivisions_r = 50.0;
    float subdivisions_theta = 150.0;
    float dtheta = 1.0 / subdivisions_theta;
    float dr = 1.0 / subdivisions_r;

    vec3 Exyz = vec3(0.0, 0.0, 0.0);

    vec3 up = vec3(0.001, 0.32861, -0.2381); // pre-compute a normalized up vector
    up = normalize(up);
    vec3 tz = washer.normal;
    vec3 tx = normalize(cross(tz, up));
    vec3 ty = normalize(cross(tz, tx));
    for(float i = 0.0; i < subdivisions_r; ++i) // r
    {
        float r = washer.inner + (i / subdivisions_r) * (washer.outer - washer.inner);
        float ds = r * dtheta;
        for(float j = 0.0; j < subdivisions_theta; ++j) // theta
        {
            float theta = 2.0 * pi * j / subdivisions_theta;
            float dA = dr * ds;
            float dq = washer.sigma * dA;

            vec2 uv = vec2(r * cos(theta), r * sin(theta));
            vec3 p = uv.x * tx + uv.y * ty + washer.pos;

            vec3 dist_v = pos - p;
            float r2 = dot(dist_v, dist_v);
            float dE = 1.0 / (4.0 * pi * E0) * (dq / r2);
            vec3 dExyz = normalize(dist_v);
            dExyz *= dE;
            Exyz += dExyz;
        }
    }
    return Exyz;
}

void main() // old compute main function with test charges
{
    // calculate electric field vector at vpos
    // point charge
    /*Point Q1;
    Q1.pos = pos;
    Q1.q = charge;*/

    // line segment charge
    /*LineSegment Q2;
    Q2.a = pos;
    Q2.b = pos2;
    Q2.q = charge * 4.0;*/

    // infinite plane charge
    /*Plane Q3;
    Q3.normal = normalize(pos2 - pos);
    Q3.pos = pos;
    Q3.sigma = charge * 0.2*/;

    // ring charge
    /*Ring Q4;
    vec3 dir = pos2 - pos;
    Q4.normal = normalize(dir);
    Q4.pos = pos;
    Q4.radius = length(dir);
    Q4.q = charge * 4.0;*/

    // disc charge
    Disc Q5;
    vec3 dir = pos2 - pos;
    Q5.normal = normalize(dir);
    Q5.pos = pos;
    Q5.radius = length(dir);
    Q5.sigma = charge / 2.0;

    // washer charge
    /*Washer Q6;
    vec3 dir = pos2 - pos;
    Q6.normal = normalize(dir);
    Q6.pos = pos;
    Q6.outer = length(dir);
    Q6.inner = Q6.outer / 2.0;
    Q6.sigma = charge;*/

    //vec3 z = computePoint(Q1, vpos);
    //vec3 z = computeLineSegment(Q2, vpos);
    //vec3 z = computePlane(Q3, vpos);
    //vec3 z = computeGKRing(Q4, vpos);
    vec3 z = computeGKDisc(Q5, vpos);
    //vec3 z = computeGKWasher(Q6, vpos);

    float mag = length(z);

    // generate color
    float col = clamp(mag, min_color, max_color);
    col = map(col, min_color, max_color, 0.0, 1.0);
    color = mix(vec3(0.0, 0.0117, 0.6784), vec3(0.941, 0.2039, 0.1215), col);

    // clamp z between min and max value
    float arrow_size = clamp(mag, 0.05, 1.0);
    z *= (arrow_size / mag);

    // calculate orientation matrix
    vec3 x = normalize(cross(vpos, vec3(0.0003, 1.0, 0.0001))) * arrow_size;
    vec3 y = normalize(cross(z, x)) * arrow_size;

    transform[0] = vec4(x, 0.0);//vec4(x, vpos.x);
    transform[1] = vec4(y, 0.0);//vec4(y, vpos.y);
    transform[2] = vec4(z, 0.0);//vec4(z, vpos.z);
    transform[3] = vec4(vpos, 1.0);
}

function addSphere(position, radius, charge) // old HTML elements, not using sliders anymore
{
    // creating HTML controls
    const controls = document.getElementById("charge-control-container");
    const div = document.createElement("div");
    div.className = "charge-panel";
    controls.appendChild(div);

    // X slider
    const text_x = document.createTextNode("x: ");
    div.appendChild(text_x);

    const slider_x = document.createElement("input");
    slider_x.type = "range";
    slider_x.min = pos_min;
    slider_x.max = pos_max;
    slider_x.value = 0;
    slider_x.step = 0.01;
    slider_x.id = shapes.length * 3;
    div.appendChild(slider_x);

    slider_x.oninput = function () {
        shapes[slider_x.id / 3].position[0] = slider_x.value;
    }

    // Y slider
    const text_y = document.createTextNode("y: ");
    div.appendChild(text_y);

    const slider_y = document.createElement("input");
    slider_y.type = "range";
    slider_y.min = pos_min;
    slider_y.max = pos_max;
    slider_y.value = 0;
    slider_y.step = 0.01;
    slider_y.id = shapes.length * 3 + 1;
    div.appendChild(slider_y);

    slider_y.oninput = function () {
        shapes[(slider_y.id - 1) / 3].position[1] = slider_y.value;
    }

    // Z slider
    const text_z = document.createTextNode("z: ");
    div.appendChild(text_z);

    const slider_z = document.createElement("input");
    slider_z.type = "range";
    slider_z.min = pos_min;
    slider_z.max = pos_max;
    slider_z.value = 0;
    slider_z.step = 0.01;
    slider_z.id = shapes.length * 3 + 2;
    div.appendChild(slider_z);

    slider_z.oninput = function () {
        shapes[(slider_z.id - 2) / 3].position[2] = slider_z.value;
    }

    // Charge slider
    const text_charge = document.createTextNode("Charge: ");
    div.appendChild(text_charge);

    const slider_charge = document.createElement("input");
    slider_charge.type = "range";
    slider_charge.min = -10;
    slider_charge.max = 10;
    slider_charge.value = 0;
    slider_charge.step = 0.5;
    slider_charge.id = "charge-slider";
    slider_charge.name = shapes.length;
    div.appendChild(slider_charge);

    slider_charge.oninput = function () {
        shapes[slider_charge.name].charge = slider_charge.value;
    }

    shapes.push({
        name: "sphere",
        position: position,
        length: sphere_prefab.indices.length,
        charge: charge,
        mVAO: sphereVAO
    });

    updateComputeProgram();
}